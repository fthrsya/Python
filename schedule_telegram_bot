import telegram
import requests
import schedule
import time
import os,psutil,signal,subprocess



# print(bot.get_me())

ru3x=r"C:\Users\x\Desktop\ru3x.bat"
tr2=r"C:\Users\x\Desktop\tr2.bat"
eux3n=r"C:\Users\x\Desktop\test3x.bat"

def ru3xfunc():
     pro = subprocess.Popen(ru3x,creationflags=subprocess.CREATE_NEW_CONSOLE)
def tr2func():
     pro1 = subprocess.Popen(tr2,creationflags=subprocess.CREATE_NEW_CONSOLE) 
def eux3nfunc():
     pro2 = subprocess.Popen(eux3n,creationflags=subprocess.CREATE_NEW_CONSOLE)    

import logging

from telegram import Update, ForceReply
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)


# Define a few command handlers. These usually take the two arguments update and
# context.
def start(update: Update, _: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    user = update.effective_user
    update.message.reply_markdown_v2(
        fr'Hi {user.mention_markdown_v2()}\!',
        reply_markup=ForceReply(selective=True),
    )


def help_command(update: Update, _: CallbackContext) -> None:
    """Send a message when the command /help is issued."""
    update.message.reply_text('Help!')


def remove_job_if_exists(name: str, context: CallbackContext) -> bool:
    """Remove job with given name. Returns whether job was removed."""
    current_jobs = context.job_queue.get_jobs_by_name(name)
    if not current_jobs:
        return False
    for job in current_jobs:
        job.schedule_removal()
    return True


def travian(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    try:
        r = requests.get('http://ip:port/', timeout=5)

        update.message.reply_text("ru3x UP")
    except requests.exceptions.RequestException as e:
        update.message.reply_text("ru3x DOWN")
        ru3xfunc()
    try:
        k = requests.get('http://ip:port/', timeout=5)

        update.message.reply_text("TR2 UP")
    except requests.exceptions.RequestException as e:
        update.message.reply_text("TR2 DOWN")
        tr2func()
	
    try:
        k = requests.get('http://ip:port/', timeout=5)

        update.message.reply_text("EUX3N UP")
    except requests.exceptions.RequestException as e:
        update.message.reply_text("EUX3N DOWN")
        eux3nfunc()

    job_removed = remove_job_if_exists(str(chat_id), context)
    if job_removed:
        print("Ã–nceki job silindi")
    context.job_queue.run_repeating(travian_job, 3600, context=chat_id, name=str(chat_id))


def travian_job(context: CallbackContext) -> None:
    """Send the alarm message."""
    job = context.job
    # context.bot.send_message(job.context, text='Beep!')
    try:
        r = requests.get('http://ip:port/', timeout=5)
     
        context.bot.send_message(job.context, text='ru3x UP')
    except requests.exceptions.RequestException as e:
        context.bot.send_message(job.context, text='ru3x DOWN')
        tr2nfunc()
    try:
        k = requests.get('http://ip:port/', timeout=5)

        context.bot.send_message(job.context, text='TR2 UP')
    except requests.exceptions.RequestException as e:
        context.bot.send_message(job.context, text='TR2 DOWN')
        tr2func()
	
    try:
        k = requests.get('http://ip:port/', timeout=5)
        context.bot.send_message(job.context, text='EU3XN UP')
    except requests.exceptions.RequestException as e:
        context.bot.send_message(job.context, text='EU3XN DOWN')
        eux3nfunc()


def echo(update: Update, _: CallbackContext) -> None:
    """Echo the user message."""
    update.message.reply_text(update.message.text)

    # update.message.reply_text("Buralar Dutluktu")


def main() -> None:
    """Start the bot."""
    # Create the Updater and pass it your bot's token.
    updater = Updater("TELEGRAM-TOKEN")

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    # on different commands - answer in Telegram
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("travian", travian))

    # on non command i.e message - echo the message on Telegram
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, echo))

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()

